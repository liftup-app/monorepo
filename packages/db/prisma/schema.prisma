generator client {
    provider        = "prisma-client-js"
    output          = "../generated/client"
    previewFeatures = ["deno"]
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ExerciseInstance {
    id          BigInt    @id(map: "exercise_instance_pkey") @default(autoincrement())
    workoutId  BigInt
    userId     String    @db.Uuid
    exerciseId BigInt
    exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users       User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    sets        Set[]
}

model Exercise {
    id                 BigInt               @id(map: "exercise_pkey") @default(autoincrement())
    createdAt         DateTime?            @default(now()) @db.Timestamptz(6)
    title              String               @unique(map: "exercise_title_key") @db.VarChar
    userId            String?              @db.Uuid
    exerciseInstances ExerciseInstance[]
    users              User?               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Set {
    id                   BigInt             @id @default(autoincrement())
    createdAt           DateTime?          @default(now()) @db.Timestamptz(6)
    weight               Int                @db.SmallInt
    repetitions          Int                @db.SmallInt
    userId              String             @db.Uuid
    exerciseInstanceId BigInt
    exerciseInstance   ExerciseInstance @relation(fields: [exerciseInstanceId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users                User              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
    id                 String               @id(map: "profiles_pkey") @db.Uuid
    updatedAt         DateTime?            @db.Timestamptz(6)
    username           String?              @unique(map: "profiles_username_key")
    fullName          String?
    avatarUrl         String?
    website            String?
    email              String?
    exerciseInstances ExerciseInstance[]
    exercises          Exercise[]
    sets               Set[]
    workouts           Workout[]
}

model Workout {
    id                 BigInt               @id(map: "Workout_pkey") @default(autoincrement())
    createdAt         DateTime             @default(now()) @db.Timestamptz(6)
    title              String               @db.VarChar
    duration           Decimal              @db.Decimal
    userId            String               @db.Uuid
    exerciseInstances ExerciseInstance[]
    user              User                @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum ExerciseCategory {
    Arms
    Legs
    Back
    Cardio
    Chest
    Core
    Shoulders
    Olympic    
}