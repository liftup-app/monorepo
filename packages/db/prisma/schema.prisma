generator client {
    provider        = "prisma-client-js"
    output          = "../generated/client"
    previewFeatures = ["deno"]
}

datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model exercise_instances {
    id          BigInt    @id(map: "exercise_instance_pkey") @default(autoincrement())
    workout_id  BigInt
    user_id     String    @db.Uuid
    exercise_id BigInt
    exercises   exercises @relation(fields: [exercise_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    workouts    workouts  @relation(fields: [workout_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    sets        sets[]
}

model exercises {
    id                 BigInt               @id(map: "exercise_pkey") @default(autoincrement())
    created_at         DateTime?            @default(now()) @db.Timestamptz(6)
    title              String               @unique(map: "exercise_title_key") @db.VarChar
    user_id            String?              @db.Uuid
    exercise_instances exercise_instances[]
    users              users?               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sets {
    id                   BigInt             @id @default(autoincrement())
    created_at           DateTime?          @default(now()) @db.Timestamptz(6)
    weight               Int                @db.SmallInt
    repetitions          Int                @db.SmallInt
    user_id              String             @db.Uuid
    exercise_instance_id BigInt
    exercise_instances   exercise_instances @relation(fields: [exercise_instance_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    users                users              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
    id                 String               @id(map: "profiles_pkey") @db.Uuid
    updated_at         DateTime?            @db.Timestamptz(6)
    username           String?              @unique(map: "profiles_username_key")
    full_name          String?
    avatar_url         String?
    website            String?
    email              String?
    exercise_instances exercise_instances[]
    exercises          exercises[]
    sets               sets[]
    workouts           workouts[]
}

model workouts {
    id                 BigInt               @id(map: "Workout_pkey") @default(autoincrement())
    created_at         DateTime             @default(now()) @db.Timestamptz(6)
    title              String               @db.VarChar
    duration           Decimal              @db.Decimal
    user_id            String               @db.Uuid
    exercise_instances exercise_instances[]
    users              users                @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum resistance_t {
    weighted
    assisted
    regular
}
